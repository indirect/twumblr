#!/usr/bin/env ruby

if File.exist?(".env")
  require 'dotenv'
  Dotenv.load
end

def follow_redirects(url)
  require 'http'
  res = HTTP.head(url)
  res = HTTP.head(res.headers['Location']) while res.headers['Location']
  res.uri.to_s
end

def twitter
  require 'twitter'
  @twitter ||= Twitter::Client.new(
    :consumer_key => ENV["TWITTER_API_KEY"],
    :consumer_secret => ENV["TWITTER_API_SECRET"]
  )
end

def tweet_at_url(url)
  tweet_id = url.match(%r|twitter.com/\w*/status/(\d*)|){|m| m[1] }
  twitter.status(tweet_id)
end

def tumblr
  require 'tumblr_client'
  @tumblr ||= Tumblr::Client.new(
    :consumer_key => ENV["TUMBLR_CONSUMER_KEY"],
    :consumer_secret => ENV["TUMBLR_CONSUMER_SECRET_KEY"],
    :oauth_token => ENV["TUMBLR_OAUTH_TOKEN"],
    :oauth_token_secret => ENV["TUMBLR_OAUTH_TOKEN_SECRET"]
  )
end

def tumbl_tweet(tweet)
  tweet_url = "http://twitter.com/#{tweet.from_user}/status/#{tweet.id}"
  tweet_text = tweet.text.gsub(%r| http\://\S*|, '')
  attribution = %|<a href="#{tweet_url}">@#{tweet.from_user}</a>|
  if tweet.media.empty? # quote
    puts tweet_text
    puts "-- #{attribution}"
    tumblr.quote(ENV["TUMBLR_BLOG_URL"], :quote => tweet_text, :source => attribution)
  else # picture
    picture_url = tweet.media.first.media_url
    caption = "#{tweet_text} â€” #{attribution}"
    puts picture_url
    puts tweet_url
    puts caption
    tumblr.photo(ENV["TUMBLR_BLOG_URL"], :caption => caption, :source => picture_url, :link => tweet_url)
  end
end

ARGV.each do |arg|
  tweet = tweet_at_url(arg)
  tweet ||= tweet_at_url(follow_redirects(arg))
  abort "Couldn't find a tweet URL!" unless tweet
  tumbl_tweet(tweet)
end
